
u have body of text and u are trying to pull some data from it 

regex helps u find and match a pattern inside a string 

---------------------
---------------------
Identifiers:

hey , we are looking for number , letter etc .....

\d = any number
\D = anything but a number
\s = space
\S = anything but a space
\w = any letter
\W = anything but a letter
. = any character, except for a new line
\. = period. must use backslash, because . normally means any character.
\b = space around whole words


----------------------
----------------------
Modifiers:

hey , we are looking for this amout of numbers or this type 

{1,3} = for digits, u expect 1-3 counts of digits, or "places"
{x} = expect to see this amount of the preceding code.
{x,y} = expect to see this x-y amounts of the preceding code

+ = match 1 or more
? = match 0 or 1 repetitions.
* = match 0 or MORE repetitions
$ = matches at the end of string
^ = matches start of a string
| = matches either/or. Example x|y = will match either x or y
[] = range, or "variance"


------------------------
------------------------
White Space Charts:

\n = new line
\s = space
\t = tab
\e = escape
\f = form feed
\r = carriage return

------------------------
------------------------
Brackets:

[] = quant[ia]tative = will find either quantitative, or quantatative.
[a-z] = return any lowercase letter a-z
[1-5a-qA-Z] = return all numbers 1-5, lowercase letters a-q and uppercase A-Z

-------------------------
-------------------------
Methods:

import re 
 
re.match(Pattern, string, flags(optional))  		search for a pattern only at the beginning of the string | returns a match object
re.match(Pattern, string, re.I)  			case insensitive
re.search(Pattern, string, flags(optional)) 		search for a pattern across the entire string 
re.findall(Pattern, string)				returns a list of all the patterns that were matched 
re.sub(Pattern, NewPattern, string)					replaces all occurrences of the specified pattern

string.group()						returns the entire match
string.groups()

--------------------------
Regex with Re

import re 

exampleString = '''
Jessica is 15 years old, and Daniel is 27 years old.
Edward is 97 years old, and his grandfather, Oscar, is 102. 
'''

ages = re.findall(r'\d{1,3}', exampleString)
names = re.findall(r'[A-Z][a-z]*')  * more of these

NOTE : notify Python to that , this is going to be a regular expression string ==> r 
